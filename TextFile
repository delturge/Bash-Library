#!/bin/bash
#
# Anthony Rutledge
# anthony_rutledge_101@yahoo.com
# https://www.linkedin.com/in/anthony-rutledge-2988b0125/
#
# A generic library that provides for easy file maniupluation using sed, grep, and awk.
#
# Note: This library depends on a another libary (String), as there is no trim() command in the GNU command set.

##
# Determine if a file has a string pattern.
###
function fileHas ()
{
    pattern=$1
    inputFile=$2

    grep -q $pattern $inputFile &> /dev/null
}

##
# Get one specific line from a file.
###
function getLine ()
{
    pattern=$1
    inputFile=$2

    if [[ ! fileHas $pattern $inputFile ]]
    then
        return 1
    fi

    grep $pattern $inputFile | head -n 1
}

##
# Get an entire column / field of values for the entire file.
#
# Note: An awk solution is possible, but cut is very direct.
###
function getColumn ()
{
    delimiter=$1
    field=$2
    inputFile=$3

    cut -d $1 -f $2 -s $inputFile
}

##
# Get the number of lines that match a pattern.
###
function lineMatchCount ()
{
    grep -c $pattern $inputFile
}

##
# Get the total number of lines in a file.
# 
# Note: This function requires access to the String library.
###
function getLineCount ()
{
    filename=$1
    trim $(wc -l $filename | awk {'print $1'})
}

##
# Get a line with its row number.
###
function getNumberedLine ()
{
    pattern=$1
    inputFile=$2

    grep -n -m 1 $pattern $inputFile
}

##
# Get the number of a specific line.
###
function getLineNumber ()
{
    pattern=$1
    inputFile=$2

    getNumberedLine $pattern $inputFile | awk -F : {'print $1'}
}

##
# Get an inclusive range of lines by start and end line numbers.
###
function selectLines ()
{
    startLineNumber=$1
    endLineNumber=$2
    inputFile=$3

    sed -n "${startLineNumber},${endLineNumber}p" $inputFile
}

##
# Get an inclusive range of lines from start number to a string pattern.
###
function getLineRangeToPattern ()
{
    startLineNumber=$1
    endLinePattern=$2
    inputFile=$3

    sed -n "${startLineNumber},/${endLinePattern}/p" $inputFile 
}

##
# Get an inclusive range of lines from start pattern to a end pattern.
###
function getLineRange ()
{
    pattern1=$1
    pattern2=$2
    inputFile=$3

    startLineNumber=$(getLineNumber $pattern1 $inputFile)
    endLineNumber=$(getLineNumber $pattern2 $inputFile)
    selectLines $startLineNumber $endLineNumber $inputFile
}

##
# Insert text above a target line number.
###
function insertAbove ()
{
    targetLineNumber=$1
    newLine=$2
    inputFile=$3

    sed -i "${targetLineNumber}i${newLine}" $inputFile
}

##
# Insert text below a target line number.
###
function insertBelow ()
{
    targetLineNumber=$1
    newLine=$2
    inputFile=$3

    sed -i "${targetLineNumber}a${newLine}" $inputFile
}

##
# Update / patch a specific portion of a line. Does not overwrite entire line.
###
function updateRecord ()
{
    targetLineNumber=$1
    searchString=$2
    substitution=$3
    inputFile=$4

    sed -i "${targetLineNumber}s/${searchString}/${substitution}/" $inputFile
}

##
# Erase a line and then replace it with new text.
###
function overwrite ()
{
    targetLineNumber=$1
    replacementLine=$2
    inputFile=$3

    sed -i "${targetLineNumber}c${replacementLine}" $inputFile
}

##
# Remove an entire line from a file.
###
function deleteRecord ()
{
    targetLineNumber=$1
    inputFile=$2

    sed -i "${targetLineNumber}d" $inputFile
}
